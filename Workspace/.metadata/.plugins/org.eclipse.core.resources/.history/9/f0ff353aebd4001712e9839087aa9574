package OwenC.AutomatedTestingWeek;

import static org.junit.Assert.*;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.junit.*;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.PageFactory;

import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.Status;
import com.aventstack.extentreports.reporter.ExtentHtmlReporter;
import com.gargoylesoftware.htmlunit.javascript.background.JavaScriptExecutor;

public class DraggableTest {

	private WebDriver webDriver;
	private static ExtentReports report;
	private ScreenShot screenShot;
	private SpreadSheetReader spreadSheetReader;

	@BeforeClass
	public static void init() {
		report = new ExtentReports();
		String fileName = "demoQATestResults" + ".html";
		String filePath = System.getProperty("user.dir") + File.separatorChar + fileName;
		report.attachReporter(new ExtentHtmlReporter(filePath));

	}

	@Before
	public void setUp() {
		webDriver = new ChromeDriver();
		screenShot = new ScreenShot();
		spreadSheetReader = new SpreadSheetReader("properties.xlsx");

	}

	@After
	public void tearDown() {
		webDriver.quit();

	}

	@AfterClass
	public static void clearUp() {
		report.flush();
	}

	private void dragAndDrop(WebElement toMove, int x, int y)
	{
		Actions builder = new Actions(webDriver);
		builder.dragAndDropBy(toMove, x, y).perform();
	}
	
	@Test
	public void defaultFunctionalityTest() {
		ExtentTest test = report.createTest("defaultFunctionalityTest");
		test.log(Status.INFO, "Default Functionality Test started");
		
		//JavascriptExecutor js;
		DemoQAHomePage demoHome = PageFactory.initElements(webDriver, DemoQAHomePage.class);
		DemoQADraggable draggablePage = PageFactory.initElements(webDriver, DemoQADraggable.class);
		Integer initialXPos;
		Integer initialYPos;
		Actions builder = new Actions(webDriver);
		
		
		List<String> inputList = new ArrayList<String>();
		
		/*if (webDriver instanceof JavascriptExecutor) {
			js = (JavascriptExecutor) webDriver;
		} else {
			throw new IllegalStateException("This driver does not support JavaScript!");
		}*/
		
		inputList = spreadSheetReader.readRow(4, "inputs");
		test.log(Status.DEBUG, "URL recieved from spreadsheet: " + inputList.get(1));
		webDriver.navigate().to(inputList.get(1));
		webDriver.manage().window().maximize();
		
		demoHome.clickDraggableLink();
		test.log(Status.INFO, "Link clicked");
		
		try {
			String sShot1 = screenShot.take(webDriver, "beforeMove");
			test.addScreenCaptureFromPath(sShot1);
			test.log(Status.INFO, "ScreenShot Before Move");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		initialXPos = draggablePage.getDraggableX();
		test.log(Status.DEBUG, initialXPos.toString());
		initialYPos = draggablePage.getDraggableY();
		test.log(Status.DEBUG, initialYPos.toString());
		
		//click and drag draggable
		dragAndDrop(draggablePage.getDraggable(), 200, 300);
		test.log(Status.DEBUG, "New X Pos: " + draggablePage.getDraggableX());
		test.log(Status.DEBUG, "New Y Pos: " + draggablePage.getDraggableY());
		
		try {
			String sShot2 = screenShot.take(webDriver, "afterMove");
			test.addScreenCaptureFromPath(sShot2);
			test.log(Status.INFO, "ScreenShot After Move");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		//assert initialXPos&&InitialYPos != draggable current XYPos
		assertTrue("Result not expected", draggablePage.getDraggableX() != initialXPos);

	}
	

	@Test
	public void constrainMovement() {
		ExtentTest test = report.createTest("constrainMovementTest");
		test.log(Status.INFO, "Constrain Movement Test started");
		
		DemoQAHomePage demoHome = PageFactory.initElements(webDriver, DemoQAHomePage.class);
		DemoQADraggable draggablePage = PageFactory.initElements(webDriver, DemoQADraggable.class);
		Integer initialXPos;
		Integer initialYPos;
		Actions builder = new Actions(webDriver);
		List<String> inputList = new ArrayList<String>();
		
		inputList = spreadSheetReader.readRow(4, "inputs");
		test.log(Status.DEBUG, "URL recieved from spreadsheet: " + inputList.get(1));
		webDriver.navigate().to(inputList.get(1));
		webDriver.manage().window().maximize();
		
		demoHome.clickDraggableLink();
		test.log(Status.INFO, "Link clicked: Draggable");
		
		draggablePage.clickConstrainMovement();
		test.log(Status.INFO, "Button clicked: ConstrainMovement");
		
		initialXPos = draggablePage.getVertDraggableX();
		test.log(Status.DEBUG, initialXPos.toString());
		initialYPos = draggablePage.getHorizontalDraggableY();
		test.log(Status.DEBUG, initialYPos.toString());
		
		dragAndDrop(draggablePage.getVertDraggable(), 200, 0);
		test.log(Status.DEBUG, "Attempted move of object by +200 in X");
		dragAndDrop(draggablePage.getHorizontalDraggable(), 0, 200);
		test.log(Status.DEBUG, "Attempted move of object by +200 in Y");
		
		assertFalse("Object moved unexpectedly", draggablePage.getVertDraggableX() != initialXPos);
		assertFalse("Object moved unexpectedly", draggablePage.getHorizontalDraggableY() != initialYPos);
	}
	
	

	@Test
	public void cursorStyle() {

	}

	@Test
	public void events() {

	}

	@Test
	public void draggableAndSortable() {

	}
}
